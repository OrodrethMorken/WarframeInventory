Index: app/src/main/java/com/games/orodreth/warframeinventory/Adapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/games/orodreth/warframeinventory/Adapter.java	(date 1558862352270)
+++ app/src/main/java/com/games/orodreth/warframeinventory/Adapter.java	(date 1558862352270)
@@ -46,6 +46,7 @@
         Items currentItem = mItems.get(position);
 
         String imageUrl = new String("https://warframe.market/static/assets/"+currentItem.getImageUrl());
+        //String imageUrl = new String("https://cdn.warframestat.us/img/"+currentItem.getImageUrl());
         //String imageUrl = currentItem.getImageUrl();
         String itemName = currentItem.getItem();
         int itemDucats = currentItem.getDucats();
Index: app/src/main/java/com/games/orodreth/warframeinventory/ItemActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/games/orodreth/warframeinventory/ItemActivity.java	(date 1558862352331)
+++ app/src/main/java/com/games/orodreth/warframeinventory/ItemActivity.java	(date 1558862352331)
@@ -35,6 +35,7 @@
 
         Intent intent = getIntent();
         String imageUrl = new String("https://warframe.market/static/assets/"+intent.getStringExtra(EXTRA_URL));
+        //String imageUrl = new String("https://cdn.warframestat.us/img/"+intent.getStringExtra(EXTRA_URL));
         itemName = intent.getStringExtra(EXTRA_NAME);
         int itemDucs = intent.getIntExtra(EXTRA_DUCATS,0);
         int itemPlats = intent.getIntExtra(EXTRA_PLATINUM,0);
Index: app/src/main/java/com/games/orodreth/warframeinventory/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/games/orodreth/warframeinventory/MainActivity.java	(date 1558862352300)
+++ app/src/main/java/com/games/orodreth/warframeinventory/MainActivity.java	(date 1558862352300)
@@ -1,5 +1,6 @@
 package com.games.orodreth.warframeinventory;
 
+import android.content.ClipData;
 import android.content.Intent;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -23,6 +24,7 @@
 import com.android.volley.RequestQueue;
 import com.android.volley.Response;
 import com.android.volley.VolleyError;
+import com.android.volley.toolbox.JsonArrayRequest;
 import com.android.volley.toolbox.JsonObjectRequest;
 import com.android.volley.toolbox.Volley;
 
@@ -149,7 +151,7 @@
                                 JSONArray jsonArray = arrayItem.getJSONArray("en");
 
 
-                                for (int i = 0; i < jsonArray.length(); i++) {  //limited jsonArray.length() for test purpose TODO Remove Limit
+                                for (int i = 0; i < 5; i++) {  //limited jsonArray.length() for test purpose TODO Remove Limit
                                     JSONObject en = jsonArray.getJSONObject(i);
 
                                     String url_name = en.getString("url_name");
@@ -679,4 +681,192 @@
         //mStorage.write(mInventory);
         super.onBackPressed();
     }
+
+    /**
+     * new parser for the JSON of Warframe Community
+     * TODO continue this function and create a new function for plat using NexusHub api
+     */
+    private void parseJSON2(){
+        String url = "https://raw.githubusercontent.com/WFCD/warframe-items/development/data/json/All.json";
+        mItems = new ArrayList<>();
+
+        mProgressStatus = 0;
+        mProgressBar.setMax(100);
+        JsonArrayRequest request = new JsonArrayRequest(Request.Method.GET, url, null,
+                new Response.Listener<JSONArray>() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        mProgressBar.setMax(response.length());
+                        for (int i=0; i<response.length(); i++){
+                            try {
+                                JSONObject item = response.getJSONObject(i);
+                                if ((item.getBoolean("tradable")&&(
+                                        item.getString("category").equals("Arcanes")||item.getString("category").equals("Archwing")||item.getString("category").equals("Melee")||item.getString("category").equals("Pets")||item.getString("category").equals("Primary")||item.getString("category").equals("Relics")||item.getString("category").equals("Secondary")||item.getString("category").equals("Sentinels")||item.getString("category").equals("Warframes")
+                                ))||item.getString("category").equals("Mods")){
+                                    String name = item.getString("name");
+                                    String img = item.getString("imageName");
+                                    if(!item.isNull("components")){
+                                        JSONArray comp = item.getJSONArray("components");
+                                        for(int j=0; j < comp.length(); j++){
+                                            if(comp.getJSONObject(j).getBoolean("tradable")&&comp.getJSONObject(j).isNull("type")) {
+                                                String fullname = name + " " + comp.getJSONObject(j).getString("name");
+                                                String fullImage = comp.getJSONObject(j).getString("imageName");
+                                                Items items = new Items(fullImage, fullname, "", "");
+                                                if(!comp.getJSONObject(j).isNull("ducats")){
+                                                    int ducats = comp.getJSONObject(j).getInt("ducats");
+                                                    items.setDucat(ducats);
+                                                }
+                                                mItems.add(items);
+                                            }
+                                        }
+                                    }else{
+                                        Items singleItem = new Items(img, name, "","");
+                                        if(!item.isNull("ducats")) singleItem.setDucat(item.getInt("ducats"));
+                                        mItems.add(singleItem);
+                                    }
+                                }
+                            } catch (JSONException e) {
+                                e.printStackTrace();
+                            }
+
+                            mProgressStatus++;
+                            System.out.println("XXX PJ2 prog: "+mProgressStatus+" of "+response.length());
+                        }
+                    }
+                }, new Response.ErrorListener() {
+            @Override
+            public void onErrorResponse(VolleyError error) {
+
+            }
+        });
+        mRequestQueue.add(request);
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+
+                while(mProgressStatus<mProgressBar.getMax()) {
+
+                    android.os.SystemClock.sleep(50);
+                }
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        draw();
+                        android.os.SystemClock.sleep(100);
+                    }
+                });
+            }
+        }).start();
+    }
+
+    /**
+     * Look plat prices on NexusHub
+     */
+    private void plat2(){
+        mProgressStatus = 0;  //reset progress value
+        //mProgressBar.setVisibility(View.VISIBLE);
+        new Thread(new Runnable() { //start thread were search plat values
+            @Override
+            public void run() {
+
+                for (int j = 0; j < mItems.size(); j++) {
+                    String url = "https://api.warframe.market/v1/items/" + mItems.get(j).getUrl() + "/orders";  //url of the single item
+                    final int finalJ = j;                                                           //register position in the array
+
+                    JsonObjectRequest request_duc = new JsonObjectRequest(Request.Method.GET, url, null,
+                            new Response.Listener<JSONObject>() {
+                                @Override
+                                public void onResponse(JSONObject response) {
+                                    try {
+                                        JSONObject payload_plat = response.getJSONObject("payload");
+                                        JSONArray jsonArray_plat = payload_plat.getJSONArray("orders");
+                                        int plat = 0;
+                                        ArrayList<JSONObject> orders = new ArrayList<>();
+                                        //System.out.println("XXX is List empty?: " + orders.isEmpty());
+
+                                        for (int i = 0; i < jsonArray_plat.length(); i++) {         //looking for all sell orders that are ingame on pc
+                                            JSONObject itemOrder = jsonArray_plat.getJSONObject(i);
+                                            JSONObject user = itemOrder.getJSONObject("user");
+                                            if (itemOrder.getString("order_type").equals("sell") &&
+                                                    itemOrder.getString("platform").equals("pc") &&
+                                                    itemOrder.getString("region").equals("en") &&
+                                                    user.getString("status").equals("ingame") &&
+                                                    itemOrder.getString("visible").equals("true")) {
+                                                orders.add(itemOrder);
+                                            }
+                                        }
+
+                                        if (orders.isEmpty()) {
+                                            //System.out.println("XXX no order for: "+mItems.get(finalJ).getItem());
+                                            if (finalJ < mItems.size()) {
+                                                mProgressStatus++;
+                                                //if(mProgressStatus%30==0) Toast.makeText(MainActivity.this, ""+finalJ+" of "+mItems.size(), Toast.LENGTH_SHORT).show();
+                                            } else mProgressStatus = mItems.size();
+                                        } else {
+                                            Collections.sort(orders, new Comparator<JSONObject>() {
+                                                @Override
+                                                public int compare(JSONObject o1, JSONObject o2) {
+                                                    int result = 0;
+                                                    try {
+                                                        result = Integer.valueOf(o1.getInt("platinum")).compareTo(Integer.valueOf(o2.getInt("platinum")));
+                                                    } catch (JSONException e) {
+                                                        e.printStackTrace();
+                                                    }
+                                                    return result;
+                                                }
+                                            });
+                                            plat = orders.get(0).getInt("platinum");
+                                            mItems.get(finalJ).setPlat(orders.get(0).getInt("platinum"));
+                                            if (finalJ < mItems.size()) {
+                                                mProgressStatus++;
+                                                //if(mProgressStatus%30==0) Toast.makeText(MainActivity.this, ""+finalJ+" of "+mItems.size(), Toast.LENGTH_SHORT).show();
+                                            } else mProgressStatus = mItems.size();
+                                            //System.out.println("XXX json mProgressStatus: "+mProgressStatus);
+                                        }
+                                    }catch (JSONException e) {
+                                        //e.printStackTrace();
+                                        //System.out.println("XXX no plat value j: "+finalJ);
+                                        mProgressStatus++;
+                                        //if(mProgressStatus%30==0) Toast.makeText(MainActivity.this, ""+finalJ+" of "+mItems.size(), Toast.LENGTH_SHORT).show();
+                                    }
+                                }
+                            }, new Response.ErrorListener() {
+                        @Override
+                        public void onErrorResponse(VolleyError error) {
+                            error.printStackTrace();
+                        }
+                    });
+
+                    mRequestQueue.add(request_duc);
+                    //SystemClock.sleep(333);
+                }
+            }
+        }).start();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                mProgressBar.setMax(mItems.size());
+                while (mProgressStatus < mItems.size()){
+                    SystemClock.sleep(100);
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            //System.out.println("XXX bar mProgressStatus: "+mProgressStatus);
+                            mProgressBar.setProgress(mProgressStatus);
+                        }
+                    });
+                };
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mProgressBar.setProgress(0);
+                        Toast.makeText(MainActivity.this, "Update Platinum Ended", Toast.LENGTH_SHORT).show();
+                        mCatalog.write(mItems);
+                        draw();
+                        ducPlat();
+                    }
+                });
+            }
+        }).start();
+    }
 }
\ No newline at end of file
Index: app/build/generated/source/buildConfig/debug/com/games/orodreth/warframeinventory/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/source/buildConfig/debug/com/games/orodreth/warframeinventory/BuildConfig.java	(date 1558862360030)
+++ app/build/generated/source/buildConfig/debug/com/games/orodreth/warframeinventory/BuildConfig.java	(date 1558862360030)
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.games.orodreth.warframeinventory;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.games.orodreth.warframeinventory";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 1;
+  public static final String VERSION_NAME = "1.0";
+}
Index: app/build/generated/source/buildConfig/release/com/games/orodreth/warframeinventory/BuildConfig.java
===================================================================
--- app/build/generated/source/buildConfig/release/com/games/orodreth/warframeinventory/BuildConfig.java	(date 0)
+++ app/build/generated/source/buildConfig/release/com/games/orodreth/warframeinventory/BuildConfig.java	(date 0)
@@ -1,13 +0,0 @@
-/**
- * Automatically generated file. DO NOT MODIFY
- */
-package com.games.orodreth.warframeinventory;
-
-public final class BuildConfig {
-  public static final boolean DEBUG = false;
-  public static final String APPLICATION_ID = "com.games.orodreth.warframeinventory";
-  public static final String BUILD_TYPE = "release";
-  public static final String FLAVOR = "";
-  public static final int VERSION_CODE = 1;
-  public static final String VERSION_NAME = "1.0";
-}
Index: app/app.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/app.iml	(date 1558779975713)
+++ app/app.iml	(date 1558779975713)
@@ -8,47 +8,60 @@
     </facet>
     <facet type="android" name="Android">
       <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="release" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleRelease" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileReleaseSources" />
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
         <afterSyncTasks>
-          <task>generateReleaseSources</task>
+          <task>generateDebugSources</task>
         </afterSyncTasks>
         <option name="ALLOW_USER_CONFIGURATION" value="false" />
         <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
         <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res;file://$MODULE_DIR$/build/generated/res/resValues/release" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res;file://$MODULE_DIR$/build/generated/res/resValues/debug" />
         <option name="TEST_RES_FOLDERS_RELATIVE_PATH" value="" />
         <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
       </configuration>
     </facet>
   </component>
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/build/intermediates/javac/release/compileReleaseJavaWithJavac/classes" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/javac/releaseUnitTest/compileReleaseUnitTestJavaWithJavac/classes" />
+    <output url="file://$MODULE_DIR$/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/javac/debugUnitTest/compileDebugUnitTestJavaWithJavac/classes" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/release" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/release/compileReleaseAidl/out" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/release" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/release/compileReleaseRenderscript/out" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/release" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/release" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/test/release" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/release/shaders" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/rs" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/testRelease/shaders" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debug/compileDebugAidl/out" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debug/compileDebugRenderscript/out" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debugAndroidTest/compileDebugAndroidTestAidl/out" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debugAndroidTest/compileDebugAndroidTestRenderscript/out" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/apt/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/shaders" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/rs" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/testDebug/shaders" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/rs" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestDebug/shaders" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
@@ -77,53 +90,37 @@
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/blame" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/build-info" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/builds" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundle_dependency_report" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundle_manifest" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/check-libraries" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/check-manifest" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/checkDebugClasspath" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/check_manifest_result" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/compatible_screen_manifest" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/duplicate_classes_check" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/external_libs_dex" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-runtime-classes" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental-verifier" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant-run-apk" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant-run-resources" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant_app_manifest" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant_run_app_info_output_file" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant_run_main_apk_resources" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant_run_merged_manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/instant_run_split_apk_resources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/intermediary_bundle" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javac" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jniLibs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/linked_res_for_bundle" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint_jar" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifest-checker" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/merged_assets" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/merged_jni_libs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/merged_manifests" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/merged_shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/metadata_feature_manifest" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/metadata_library_dependencies_report" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/module_bundle" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/prebuild" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/processed_res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/reload-dex" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/resources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shader_assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/shaders" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/signing_config" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/split-apk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/split_list" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/tmp" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/transforms" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/validate_signing_config" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
